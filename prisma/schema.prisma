generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EventCategories {
    Sport
    Entertainment
    Comedy
    Horror
    Kids
    Adults
    Tech
    Food
    Free
    Paid
}

enum OrderStatus {
    Pending
    Paid
    Cancelled
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  isVerify  Boolean  @default(false)
  ref_code  String?  @unique

  points    User_Point[]
  coupons   User_Coupon[]
  reviews   Review[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User_Point {
  id        Int      @id @default(autoincrement())
  point     Int
  createdAt DateTime @default(now())
  expiredAt DateTime
  isRedeem  Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
  
  userId    Int
}

model User_Coupon {
  id        Int      @id @default(autoincrement())
  isRedeem  Boolean  @default(false)
  percentage Float
  createdAt DateTime @default(now())
  expiredAt DateTime

  user      User     @relation(fields: [userId], references: [id])

  userId    Int
}

model Promotor {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  isVerify  Boolean  @default(false)

  events    Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    EventCategories
  location    String
  venue       String
  date        DateTime
  time        DateTime

  promotor    Promotor @relation(fields: [promotorId], references: [id])
  promotorId  Int

  tickets     Ticket[]
  reviews     Review[]
  orders      Order[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id          Int      @id @default(autoincrement())
  title       String
  desc        String
  seats       Int
  price       BigInt

  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int

  orderDetails Order_Details[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id           Int            @id @default(autoincrement())
  total_price  BigInt
  final_price  BigInt
  status       OrderStatus    @default(Pending)
  redirect_url String?
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  event        Event          @relation(fields: [eventId], references: [id])
  eventId      Int
  expiredAt    DateTime
  details      Order_Details[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order_Details {
  id        Int     @id @default(autoincrement())
  ticket    Ticket  @relation(fields: [ticketId], references: [id])
  ticketId  Int
  qty       Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

model Review {
  id        Int      @id @default(autoincrement())
  desc      String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int

  createdAt DateTime @default(now())
}
